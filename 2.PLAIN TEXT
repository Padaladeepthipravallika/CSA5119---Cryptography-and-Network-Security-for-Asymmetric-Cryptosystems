def generate_key_matrix(key):
    key = key.upper().replace("J", "I")
    result = []
    for char in key:
        if char not in result and char.isalpha():
            result.append(char)
    for char in "ABCDEFGHIKLMNOPQRSTUVWXYZ":
        if char not in result:
            result.append(char)

    matrix = [result[i:i+5] for i in range(0, 25, 5)]
    return matrix

def find_position(matrix, char):
    for i, row in enumerate(matrix):
        for j, val in enumerate(row):
            if val == char:
                return i, j
    return None

def prepare_text(text):
    text = text.upper().replace("J", "I").replace(" ", "")
    prepared = ""
    i = 0
    while i < len(text):
        a = text[i]
        b = text[i + 1] if i + 1 < len(text) else "X"
        if a == b:
            prepared += a + "X"
            i += 1
        else:
            prepared += a + b
            i += 2
    if len(prepared) % 2 != 0:
        prepared += "X"
    return prepared

def encrypt_pair(a, b, matrix):
    row1, col1 = find_position(matrix, a)
    row2, col2 = find_position(matrix, b)
    if row1 == row2:
        return matrix[row1][(col1 + 1) % 5] + matrix[row2][(col2 + 1) % 5]
    elif col1 == col2:
        return matrix[(row1 + 1) % 5][col1] + matrix[(row2 + 1) % 5][col2]
    else:
        return matrix[row1][col2] + matrix[row2][col1]

def encrypt(text, key):
    matrix = generate_key_matrix(key)
    prepared_text = prepare_text(text)
    cipher = ""
    for i in range(0, len(prepared_text), 2):
        cipher += encrypt_pair(prepared_text[i], prepared_text[i+1], matrix)
    return cipher

# Example usage
plaintext = input("Enter the plaintext: ")
keyword = input("Enter the keyword: ")

cipher_text = encrypt(plaintext, keyword)
print("Encrypted Text:", cipher_text)
